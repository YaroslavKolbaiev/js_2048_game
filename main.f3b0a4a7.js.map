{"version":3,"sources":["scripts/main.js"],"names":["board","rows","columns","score","document","querySelector","cells","querySelectorAll","button","messageWin","messageLose","messageStart","setGame","i","row","column","id","num","updateTile","setRandom","addEventListener","handler","hasEmptyTile","isFound","r","Math","floor","random","c","tile","getElementById","innerText","classList","add","value","textContent","remove","e","code","slideLeftAndRight","slideUpAndDown","lose","win","filterZero","filter","slide","newRow","length","push","left","amazingRow","reverse","up","removeEventListener"],"mappings":"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","file":"main.f3b0a4a7.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nlet board;\nconst rows = 4;\nconst columns = 4;\nconst score = document.querySelector('.game-score');\nconst cells = document.querySelectorAll('.field-cell');\nconst button = document.querySelector('.button');\n\nconst messageWin = document.querySelector('.message-win');\nconst messageLose = document.querySelector('.message-lose');\nconst messageStart = document.querySelector('.message-start');\n\nbutton.addEventListener('click', () => {\n  if (button.textContent === 'Start') {\n    button.classList.remove('start');\n    button.classList.add('restart');\n    button.textContent = 'Restart';\n  } else {\n    button.classList.remove('restart');\n    button.classList.add('start');\n    button.textContent = 'Start';\n  }\n\n  score.textContent = '0';\n  messageStart.classList.add('hidden');\n  messageLose.classList.add('hidden');\n  messageStart.classList.add('hidden');\n\n  setGame();\n});\n\nfunction setGame() {\n  board = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  let i = 0;\n\n  for (let row = 0; row < rows; row++) {\n    for (let column = 0; column < columns; column++) {\n      cells[i].id = `${row}-${column}`;\n\n      const num = board[row][column];\n\n      updateTile(cells[i], num);\n\n      i++;\n    }\n  }\n\n  setRandom();\n  setRandom();\n  document.addEventListener('keyup', handler);\n}\n\nfunction hasEmptyTile() {\n  for (let row = 0; row < rows; row++) {\n    for (let column = 0; column < columns; column++) {\n      if (board[row][column] === 0) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction setRandom() {\n  if (!hasEmptyTile()) {\n    return;\n  }\n\n  let isFound = false;\n\n  while (!isFound) {\n    const r = Math.floor(Math.random() * rows);\n    const c = Math.floor(Math.random() * columns);\n\n    if (board[r][c] === 0) {\n      board[r][c] = Math.random() < 0.1 ? 4 : 2;\n\n      const tile = document.getElementById(`${r}-${c}`);\n\n      tile.innerText = '2';\n      tile.classList.add('field-cell--2');\n      isFound = true;\n    }\n  }\n}\n\nfunction updateTile(tile, num) {\n  tile.innerText = '';\n  tile.classList.value = '';\n  tile.classList.add('field-cell');\n\n  if (num > 0) {\n    tile.innerText = num;\n    tile.classList.add(`field-cell--${num}`);\n  }\n}\n\nconst handler = (e) => {\n  switch (e.code) {\n    case 'ArrowLeft': {\n      slideLeftAndRight(true);\n      setRandom();\n\n      break;\n    }\n\n    case 'ArrowRight': {\n      slideLeftAndRight(false);\n      setRandom();\n\n      break;\n    }\n\n    case 'ArrowUp': {\n      slideUpAndDown(true);\n      setRandom();\n\n      break;\n    }\n\n    case 'ArrowDown': {\n      slideUpAndDown(false);\n      setRandom();\n\n      break;\n    }\n  }\n\n  lose();\n  win();\n};\n\nfunction filterZero(row) {\n  return row.filter(num => num !== 0);\n}\n\nfunction slide(row) {\n  let newRow = filterZero(row);\n\n  for (let i = 0; i < newRow.length; i++) {\n    if (newRow[i] === newRow[i + 1]) {\n      newRow[i] *= 2;\n      newRow[i + 1] = 0;\n      score.textContent = `${+score.textContent + newRow[i]}`;\n    }\n  }\n\n  newRow = filterZero(newRow);\n\n  while (newRow.length < columns) {\n    newRow.push(0);\n  }\n\n  return newRow;\n}\n\nfunction slideLeftAndRight(left) {\n  for (let amazingRow = 0; amazingRow < rows; amazingRow++) {\n    let row = board[amazingRow];\n\n    if (left) {\n      row = slide(row);\n      board[amazingRow] = row;\n    } else {\n      row.reverse();\n      row = slide(row);\n      row.reverse();\n      board[amazingRow] = row;\n    }\n\n    for (let column = 0; column < columns; column++) {\n      const tile = document.getElementById(`${amazingRow}-${column}`);\n      const num = board[amazingRow][column];\n\n      updateTile(tile, num);\n    }\n  }\n}\n\nfunction slideUpAndDown(up) {\n  for (let column = 0; column < columns; column++) {\n    let row = [board[0][column],\n      board[1][column],\n      board[2][column],\n      board[3][column]];\n\n    if (up) {\n      row = slide(row);\n    } else {\n      row.reverse();\n      row = slide(row);\n      row.reverse();\n    }\n\n    for (let amazingRow = 0; amazingRow < columns; amazingRow++) {\n      board[amazingRow][column] = row[amazingRow];\n\n      const tile = document.getElementById(`${amazingRow}-${column}`);\n      const num = board[amazingRow][column];\n\n      updateTile(tile, num);\n    }\n  }\n}\n\nfunction lose() {\n  if (hasEmptyTile()) {\n    return;\n  }\n\n  for (let row = 0; row < rows; row++) {\n    for (let column = 0; column < columns - 1; column++) {\n      if (board[column][row] === board[column + 1][row]\n        || board[row][column] === board[row][column + 1]) {\n        messageLose.classList.remove('hidden');\n        document.removeEventListener('keyup', handler);\n      }\n    }\n  }\n}\n\nfunction win() {\n  for (let row = 0; row < rows; row++) {\n    for (let column = 0; column < columns; column++) {\n      if (board[row][column] === 2048) {\n        messageWin.classList.remove('hidden');\n      }\n    }\n  }\n}\n"]}